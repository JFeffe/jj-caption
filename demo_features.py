#!/usr/bin/env python3
"""
Script de d√©monstration des fonctionnalit√©s de JJ Caption.
"""

import os
import sys
import logging
from pathlib import Path

# Ajouter le r√©pertoire src au path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from transcription.whisper_handler import WhisperHandler
from conversion.format_converter import FormatConverter


def setup_logging():
    """Configure le logging."""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('demo_features.log', encoding='utf-8')
        ]
    )


def demo_transcription():
    """D√©monstration de la transcription."""
    logger = logging.getLogger(__name__)
    
    video_path = "Test_Vid/smpts-3_ep11_20250702_pk01_hd_29i.mp4"
    
    if not os.path.exists(video_path):
        logger.error(f"Fichier vid√©o non trouv√©: {video_path}")
        return None
    
    logger.info("üé¨ D√©monstration de la transcription Whisper")
    logger.info("=" * 50)
    
    try:
        # Initialiser Whisper
        whisper_handler = WhisperHandler(model_name="tiny")
        
        # Transcrire le fichier
        logger.info("Transcription en cours...")
        result = whisper_handler.transcribe(
            input_path=video_path,
            language="French",
            task="transcribe"
        )
        
        logger.info(f"‚úÖ Transcription r√©ussie: {len(result.get('segments', []))} segments")
        return result, video_path
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la transcription: {e}")
        return None


def demo_formats(result, video_path):
    """D√©monstration de tous les formats de sortie."""
    logger = logging.getLogger(__name__)
    
    logger.info("\nüìù D√©monstration des formats de sortie")
    logger.info("=" * 50)
    
    try:
        whisper_handler = WhisperHandler()
        converter = FormatConverter()
        
        base_name = video_path.replace('.mp4', '')
        
        # 1. Format SRT (SubRip)
        logger.info("1. G√©n√©ration du format SRT...")
        srt_path = f"{base_name}_demo.srt"
        whisper_handler.save_srt(result, srt_path)
        logger.info(f"   ‚úÖ SRT g√©n√©r√©: {srt_path}")
        
        # 2. Format VTT (WebVTT)
        logger.info("2. G√©n√©ration du format VTT...")
        vtt_path = f"{base_name}_demo.vtt"
        whisper_handler.save_vtt(result, vtt_path)
        logger.info(f"   ‚úÖ VTT g√©n√©r√©: {vtt_path}")
        
        # 3. Format TXT pour diffusion (avec timecodes LTC)
        logger.info("3. G√©n√©ration du format TXT pour diffusion...")
        txt_path = f"{base_name}_demo.txt"
        whisper_handler.save_txt(result, txt_path, video_path)
        logger.info(f"   ‚úÖ TXT pour diffusion g√©n√©r√©: {txt_path}")
        
        # 4. Format JSON
        logger.info("4. G√©n√©ration du format JSON...")
        json_path = f"{base_name}_demo.json"
        whisper_handler.save_json(result, json_path)
        logger.info(f"   ‚úÖ JSON g√©n√©r√©: {json_path}")
        
        # 5. Format ASS (Advanced SubStation Alpha)
        logger.info("5. Conversion vers le format ASS...")
        ass_path = f"{base_name}_demo.ass"
        converter.srt_to_ass(srt_path, ass_path)
        logger.info(f"   ‚úÖ ASS g√©n√©r√©: {ass_path}")
        
        # 6. Format SCC (Scenarist Closed Captions)
        logger.info("6. Conversion vers le format SCC...")
        scc_path = f"{base_name}_demo.scc"
        converter.srt_to_scc(srt_path, scc_path)
        logger.info(f"   ‚úÖ SCC g√©n√©r√©: {scc_path}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la g√©n√©ration des formats: {e}")
        return False


def demo_timecodes(video_path):
    """D√©monstration de la r√©cup√©ration des timecodes LTC."""
    logger = logging.getLogger(__name__)
    
    logger.info("\n‚è∞ D√©monstration des timecodes LTC")
    logger.info("=" * 50)
    
    try:
        whisper_handler = WhisperHandler()
        
        # R√©cup√©rer le timecode LTC
        ltc_timecode = whisper_handler._get_ltc_timecode(video_path)
        
        if ltc_timecode:
            logger.info(f"‚úÖ Timecode LTC trouv√©: {ltc_timecode}")
            logger.info("   Ce timecode est automatiquement utilis√© dans le format TXT pour diffusion")
        else:
            logger.warning("‚ö†Ô∏è Aucun timecode LTC trouv√© dans le fichier vid√©o")
            logger.info("   Le format TXT utilisera des timecodes calcul√©s")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la r√©cup√©ration des timecodes: {e}")
        return False


def show_file_info():
    """Affiche les informations sur les fichiers g√©n√©r√©s."""
    logger = logging.getLogger(__name__)
    
    logger.info("\nüìÅ Informations sur les fichiers g√©n√©r√©s")
    logger.info("=" * 50)
    
    demo_files = [
        "Test_Vid/smpts-3_ep11_20250702_pk01_hd_29i_demo.srt",
        "Test_Vid/smpts-3_ep11_20250702_pk01_hd_29i_demo.vtt",
        "Test_Vid/smpts-3_ep11_20250702_pk01_hd_29i_demo.txt",
        "Test_Vid/smpts-3_ep11_20250702_pk01_hd_29i_demo.json",
        "Test_Vid/smpts-3_ep11_20250702_pk01_hd_29i_demo.ass",
        "Test_Vid/smpts-3_ep11_20250702_pk01_hd_29i_demo.scc"
    ]
    
    for file_path in demo_files:
        if os.path.exists(file_path):
            size = os.path.getsize(file_path)
            size_kb = size / 1024
            logger.info(f"‚úÖ {os.path.basename(file_path)}: {size_kb:.1f} KB")
        else:
            logger.warning(f"‚ùå {os.path.basename(file_path)}: Non trouv√©")


def main():
    """Fonction principale de d√©monstration."""
    setup_logging()
    logger = logging.getLogger(__name__)
    
    logger.info("üöÄ D√©monstration des fonctionnalit√©s JJ Caption")
    logger.info("=" * 60)
    
    # 1. D√©monstration de la transcription
    result_data = demo_transcription()
    if not result_data:
        logger.error("‚ùå Impossible de continuer sans transcription")
        return
    
    result, video_path = result_data
    
    # 2. D√©monstration des timecodes LTC
    demo_timecodes(video_path)
    
    # 3. D√©monstration de tous les formats
    if demo_formats(result, video_path):
        # 4. Afficher les informations sur les fichiers
        show_file_info()
        
        logger.info("\nüéâ D√©monstration termin√©e avec succ√®s!")
        logger.info("üìã Tous les formats de sous-titres ont √©t√© g√©n√©r√©s")
        logger.info("‚è∞ Les timecodes LTC ont √©t√© r√©cup√©r√©s et utilis√©s")
        logger.info("üîß Le syst√®me est pr√™t pour la production!")
    else:
        logger.error("‚ùå Erreur lors de la d√©monstration des formats")


if __name__ == "__main__":
    main() 